---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import ToolCard from '../components/ToolCard.astro';

// LA NUEVA FORMA: import.meta.glob()
// Esto importa los módulos de forma "lazy" (perezosa), lo cual es más eficiente.
const toolImports = import.meta.glob('./tools/*.astro');

// Como los módulos se importan de forma perezosa, necesitamos resolverlos.
// Este código convierte el objeto de importaciones en una lista de herramientas renderizables.
const allTools = await Promise.all(
  Object.values(toolImports).map(async (importTool) => {
    const tool = await importTool();
    return tool;
  })
);
---

<Layout title="AI Component Factory">
	<header>
		<h1 class="title">AI Component Factory</h1>
		<p class="subtitle">
			Un portafolio vivo de herramientas y componentes web. Cada proyecto aquí
			fue concebido como una idea en una hoja de cálculo, desarrollado por una IA,
			y desplegado automáticamente.
		</p>
	</header>

	<div class="search-container">
		<input type="search" id="search-input" placeholder="Buscar por nombre, descripción o tag...">
	</div>

	<main id="tools" class="tool-grid">
		{allTools.length > 0 ? (
			allTools.map(tool => (
				<ToolCard 
					href={tool.url} 
					title={tool.frontmatter.title} 
					description={tool.frontmatter.description}
					tags={tool.frontmatter.tags}
				/>
			))
		) : (
			<p class="placeholder">La fábrica está calentando motores... Pronto aparecerán aquí las nuevas herramientas creadas por la IA.</p>
		)}
	</main>
</Layout>

<style>
	header {
		text-align: center;
		margin-bottom: 4rem; /* Reducido */
		padding: 2rem 0; /* Reducido */
	}
	.title {
		font-size: 3.5rem; /* Ligeramente más pequeño */
		font-weight: 900;
		margin-bottom: 1rem;
		background: linear-gradient(45deg, rgb(var(--accent)), rgb(var(--accent-dark)));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		text-fill-color: transparent;
	}
	.subtitle {
		font-size: 1.15rem; /* Ligeramente más pequeño */
		color: var(--text-color);
		opacity: 0.8;
		max-width: 65ch;
		margin: 0 auto;
	}
	.tool-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); /* Tarjetas más pequeñas */
		gap: 1.5rem; /* Espacio reducido */
	}
	.placeholder {
		grid-column: 1 / -1;
		text-align: center;
		padding: 4rem;
		background-color: var(--card-bg);
		border: 1px solid var(--card-border);
		border-radius: 16px;
		color: var(--text-color);
		opacity: 0.7;
		backdrop-filter: blur(10px);
	}

	.search-container {
		margin-bottom: 3rem;
	}

	.search-container #search-input {
		width: 100%;
		padding: 1rem 1.5rem;
		font-size: 1.1rem;
		border-radius: 12px;
		border: 1px solid var(--card-border);
		background-color: var(--card-bg);
		color: var(--text-color);
		box-shadow: 0 4px 12px rgba(0,0,0,0.05);
		transition: all 0.3s ease;
	}

	#search-input:focus {
		outline: none;
		border-color: rgba(var(--accent), 0.8);
		box-shadow: 0 0 0 4px rgba(var(--accent), 0.15);
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const searchInput = document.getElementById('search-input') as HTMLInputElement;
		// Seleccionamos las tarjetas de una forma más robusta
		const allTools = document.querySelectorAll('.tool-grid .card') as NodeListOf<HTMLElement>;

		if (!searchInput || allTools.length === 0) return;

		searchInput.addEventListener('input', (e) => {
			const searchTerm = (e.target as HTMLInputElement).value.toLowerCase().trim();

			allTools.forEach(toolCard => {
				const title = toolCard.querySelector('h3')?.textContent?.toLowerCase() || '';
				const description = toolCard.querySelector('p')?.textContent?.toLowerCase() || '';
				const tags = Array.from(toolCard.querySelectorAll('.tag')).map(tag => tag.textContent?.toLowerCase() || '').join(' ');

				const cardContent = `${title} ${description} ${tags}`;

				if (cardContent.includes(searchTerm)) {
					toolCard.style.display = 'flex';
				} else {
					toolCard.style.display = 'none';
				}
			});
		});
	});
</script>