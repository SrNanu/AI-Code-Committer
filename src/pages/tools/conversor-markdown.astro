---
// src/pages/tools/conversor-markdown.astro
import Layout from '../../layouts/Layout.astro';

export const frontmatter = {
  title: 'Conversor Markdown a HTML',
  description: 'Convierte rápidamente texto en formato Markdown a HTML listo para usar.',
  tags: ['utilidad', 'markdown', 'html']
};
---

<Layout title={frontmatter.title}>
  <a href={import.meta.env.BASE_URL} class="back-link">&larr; Volver a la Fábrica</a>
  <div class="tool-container">
    <h1>{frontmatter.title}</h1>
    <p>{frontmatter.description}</p>
    
    <div class="converter-wrapper">
      <textarea id="markdown-input" placeholder="Escribe tu Markdown aquí..."></textarea>
      <div id="html-output" class="prose"></div>
    </div>
  </div>

</Layout>

<script>
  import { marked } from 'marked';

  const markdownInput = document.getElementById('markdown-input') as HTMLTextAreaElement;
  const htmlOutput = document.getElementById('html-output') as HTMLDivElement;

  function convertAndRender() {
    const markdownText = markdownInput.value;
    const html = marked.parse(markdownText);
    if (typeof html === 'string') {
      htmlOutput.innerHTML = html;
    } 
  }

  markdownInput.addEventListener('input', convertAndRender);

  // Initial conversion for any default text
  convertAndRender();
</script>

<style>
  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    text-decoration: none;
    font-weight: 700;
    color: var(--text-color);
    opacity: 0.8;
  }
  .tool-container {
    padding: 2rem;
    border: 1px solid var(--card-border);
    border-radius: 16px;
    background-color: var(--card-bg);
  }
  
  .converter-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
    min-height: 500px;
  }

  #markdown-input, #html-output {
    width: 100%;
    height: 100%;
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--card-border);
    background-color: rgba(0,0,0,0.05);
    color: var(--text-color);
    font-family: var(--font-family-mono);
    font-size: 0.95rem;
    resize: none;
  }

  #markdown-input:focus {
    outline: none;
    border-color: rgba(var(--accent), 0.8);
    box-shadow: 0 0 0 4px rgba(var(--accent), 0.15);
  }

  #html-output {
    overflow-y: auto;
  }

  /* Estilos para el contenido HTML renderizado */
  .prose :global(h1), .prose :global(h2), .prose :global(h3) {
    margin-bottom: 1rem;
    font-weight: 700;
  }
  .prose :global(p) {
    margin-bottom: 1rem;
    line-height: 1.6;
  }
  .prose :global(ul), .prose :global(ol) {
    margin-bottom: 1rem;
    padding-left: 2rem;
  }
  .prose :global(li) {
    margin-bottom: 0.5rem;
  }
  .prose :global(blockquote) {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
    border-left: 3px solid rgba(var(--accent), 0.5);
    color: var(--text-color);
    opacity: 0.8;
  }
  .prose :global(code) {
    background-color: rgba(0,0,0,0.1);
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 85%;
    border-radius: 6px;
    font-family: var(--font-family-mono);
  }
  .prose :global(pre) {
    background-color: rgba(0,0,0,0.1);
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
  }
  .prose :global(pre code) {
    padding: 0;
    background: none;
    font-size: 100%;
  }
  .prose :global(a) {
    color: rgb(var(--accent));
    text-decoration: none;
    transition: color 0.2s ease;
  }
  .prose :global(a:hover) {
    color: rgb(var(--accent-dark));
    text-decoration: underline;
  }
</style>
